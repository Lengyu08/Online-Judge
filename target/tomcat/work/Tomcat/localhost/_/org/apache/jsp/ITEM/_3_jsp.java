/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.37
 * Generated at: 2023-12-08 13:30:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ITEM;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import Login_And_Register.CheckLogin;
import java.util.*;

public final class _3_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/navbar.jsp", Long.valueOf(1702036038760L));
    _jspx_dependants.put("/header.jsp", Long.valueOf(1702036038688L));
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");

  request.setCharacterEncoding("utf-8");
  response.setCharacterEncoding("utf-8");

  String loggedInUsername = (String) session.getAttribute("loggedInUsername");
  // å¦æéè¦ç»åºï¼ä» Session ä¸­å é¤ç¨æ·å
  String logout = request.getParameter("logout");
  if ("true".equals(logout)) {
    new CheckLogin().logoutUser(loggedInUsername);
    session.removeAttribute("loggedInUsername");
    response.sendRedirect("/home.jsp");
  }

      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("\r\n");

  if (loggedInUsername == null || loggedInUsername.isEmpty()) {
      session.setAttribute("Error", "ChatLoginError");
      response.sendRedirect("../item.jsp");
  }

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\"/>\r\n");
      out.write("  <title>Chat Room</title>\r\n");
      out.write("  <link rel=\"stylesheet\" type=\"text/css\" href=\"../CSS/navbar.css\"/>\r\n");
      out.write("  <link rel=\"stylesheet\" type=\"text/css\" href=\"../CSS/content.css\"/>\r\n");
      out.write("  <link rel=\"stylesheet\" type=\"text/css\" href=\"../CSS/chat.css\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<nav class=\"navbar\">\r\n");
      out.write("  <a href=\"javascript:location.reload()\">\r\n");
      out.write("    <img src=\"/STATIC-RESOURCES/IMAGE/icon/logo.png\" alt=\"按钮\" width=\"15%\"/>\r\n");
      out.write("  </a>\r\n");
      out.write("\r\n");
      out.write("  <div class=\"navbar-links\">\r\n");
      out.write("    <a href=\"/home.jsp\">首页</a>\r\n");
      out.write("    <a href=\"/problemset.jsp\">题库</a>\r\n");
      out.write("    <a href=\"/item.jsp\">项目</a>\r\n");
      out.write("\r\n");
      out.write("    ");
 if (loggedInUsername == null || loggedInUsername.isEmpty()) { 
      out.write("\r\n");
      out.write("    <a href=\"/login.jsp\">登录</a>\r\n");
      out.write("    <a href=\"/register.jsp\">注册</a>\r\n");
      out.write("    ");
 } else { 
      out.write("\r\n");
      out.write("    <a href=\"/ITEM/1.jsp\">\r\n");
      out.write("      ");
      out.print( loggedInUsername );
      out.write("\r\n");
      out.write("    </a>\r\n");
      out.write("    <a href=\"?logout=true\">登出</a>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("  </div>\r\n");
      out.write("</nav>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"content\">\r\n");
      out.write("  <div id=\"friend_char_area\">\r\n");
      out.write("    <span id=\"friendList\">\r\n");
      out.write("      <h2>在线用户</h2>\r\n");
      out.write("      <div id=\"onlineList\" class=\"friend\" style=\"border: #d0d0d0 solid 3px;\">\r\n");
      out.write("      </div>\r\n");
      out.write("    </span>\r\n");
      out.write("\r\n");
      out.write("    <span id=\"chatArea\">\r\n");
      out.write("      <h2>聊天区</h2>\r\n");
      out.write("      <span id=\"chatContext\">\r\n");
      out.write("      </span>\r\n");
      out.write("    </span>\r\n");
      out.write("\r\n");
      out.write("  </div>\r\n");
      out.write("  <div id=\"inputArea\">\r\n");
      out.write("    <textarea id=\"messageInput\" placeholder=\"输入消息...\" rows=\"4\"></textarea>\r\n");
      out.write("    <button id=\"sendButton\">发送</button>\r\n");
      out.write("  </div>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("  let planWebsocket = null;\r\n");
      out.write("  function initWebpack() {//初始化websocket\r\n");
      out.write("    if ('WebSocket' in window) {\r\n");
      out.write("      planWebsocket = new WebSocket(\"ws://localhost:9090?");
      out.print(loggedInUsername);
      out.write("\"); // 通信地址\r\n");
      out.write("      planWebsocket.onopen = function (event) {\r\n");
      out.write("        console.log('建立连接');\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      planWebsocket.onmessage = function (event) {\r\n");
      out.write("        console.log('收到消息:' + event.data)\r\n");
      out.write("        let str_data = event.data;\r\n");
      out.write("        // 如果字符串是 \"user:\" 开头的, 就是用户列表\r\n");
      out.write("        if (str_data.startsWith(\"user:\")) {\r\n");
      out.write("          // 清空在线列表\r\n");
      out.write("          document.getElementById('onlineList').innerHTML = '';\r\n");
      out.write("          // 获取用户列表 // 空格作为分隔符\r\n");
      out.write("          let user_list = str_data.substring(5).split(' ');\r\n");
      out.write("          // 遍历用户列表\r\n");
      out.write("          for (let i = 0; i < user_list.length; i++) {\r\n");
      out.write("            // 创建一个 div\r\n");
      out.write("            let div = document.createElement('div');\r\n");
      out.write("            // 设置 div 的内容\r\n");
      out.write("            div.innerHTML = user_list[i];\r\n");
      out.write("            // 添加到在线列表\r\n");
      out.write("            document.getElementById('onlineList').appendChild(div);\r\n");
      out.write("          }\r\n");
      out.write("        } else if (str_data.startsWith(\"chat:\")) {\r\n");
      out.write("          if (str_data.substring(5).startsWith(\"");
      out.print(loggedInUsername);
      out.write(":\")) {\r\n");
      out.write("            // 放到聊天区作为自己输入\r\n");
      out.write("            document.getElementById(\"chatContext\").innerHTML += \"<p style=\" +\r\n");
      out.write("                \"'float: right; border: gray solid 3px; margin-top: 10px; border-radius:10px; background-color: rgb(137, 217, 97);'>\" +\r\n");
      out.write("                \"<span class='chatFont'>\"\r\n");
      out.write("                  + str_data.substring(5) +\r\n");
      out.write("                \"</span></p>\";\r\n");
      out.write("            document.getElementById(\"chatContext\").innerHTML += \"<br/><br/><br/><br/><br/>\";\r\n");
      out.write("          } else if (str_data.substring(5).startsWith(\"message:\")) {\r\n");
      out.write("            // 放到聊天区作为提示信息\r\n");
      out.write("            document.getElementById(\"chatContext\").innerHTML += \"<p style=''><span class='chatFont' style='font-size: 15px;'>\" + str_data.substring(13) + \"</span></p>\";\r\n");
      out.write("          } else {\r\n");
      out.write("            // 放到聊天区作为其他用户输入\r\n");
      out.write("            document.getElementById(\"chatContext\").innerHTML += \"<p style=\" +\r\n");
      out.write("                \"'float: left; border: gray solid 3px; margin-top: 10px; border-radius:10px; background-color: white;'>\" +\r\n");
      out.write("                \"<span class='chatFont'>\"\r\n");
      out.write("                  + str_data.substring(5) +\r\n");
      out.write("                \"</span></p>\";\r\n");
      out.write("            document.getElementById(\"chatContext\").innerHTML += \"<br/><br/><br/><br/><br/>\";\r\n");
      out.write("          }\r\n");
      out.write("        }\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      planWebsocket.onclose = function (event) {\r\n");
      out.write("        console.log('连接关闭');\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      planWebsocket.onerror = function () {\r\n");
      out.write("        alert('websocket通信发生错误！');\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      // 发送 button 的消息\r\n");
      out.write("      document.getElementById('sendButton').onclick = function () {\r\n");
      out.write("        let messageInput = document.getElementById('messageInput');\r\n");
      out.write("        let message = messageInput.value;\r\n");
      out.write("        planWebsocket.send(message);\r\n");
      out.write("        messageInput.value = '';\r\n");
      out.write("      }\r\n");
      out.write("    } else {\r\n");
      out.write("      alert('该浏览器不支持websocket!');\r\n");
      out.write("    }\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  initWebpack(); //调用\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
